/*1078 编译原理系列-语法分析
C/C++编译器，从源代码到可执行文件，整个过程称为Build，大致需要经过四个步骤：
1、预处理，Preprocess，即将源文件中的头文件包含引入、宏定义展开、去除注释等，生成一个可独立编译单元；
2、编译，Compile，从C/C++高级语言代码翻译为汇编代码；
3、汇编，Assemble，将汇编代码翻译为二进制的机器码，生成可重定位文件；
4、链接，link，即将多个可重定位文件链接为最终的可执行文件；
整个详细的过程可参考如下分享：
http://km.dahuatech.com/kms/multidoc/kms_multidoc_knowledge/kmsMultidocKnowledge.do?method=view&fdId=1630acd91b724b176aa0b4a402183baa
以上4步中，其中第2步Compile，是最为核心的一步，Compile过程又大致分为词法分析、语法分析、语义分析、中间树构建、中间代码生成、优化、生成汇编码等几个过程。

上一期，我们已了解词法分析的作用及原理，这一期，我们介绍语法分析。
语法分析器主要是对词法分析阶段产生的记号（token）进行结构化分析，产生语法表达树。
如语句 array[index] = (index+4) * (2+6)，最终会被构建成如下的语法表达树：

					 =赋值
					/     \
			[](运算符)     *(运算符)
			/   \             /      \
	array(变量) index(变量) +(运算符) +(运算符)
							/   \         /   \
				  index(变量) 4(数字)  2(数字) 6(数字)
