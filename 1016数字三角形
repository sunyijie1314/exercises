/* 1016
在讲述DP算法的时候，一个经典的例子就是数塔问题，它是这样描述的：
有如下所示的数塔，要求从顶层走到底层，若每一步只能走到相邻的结点，则经过的结点的数字之和最大是多少？
	 9
	/ \
   12  15
   / \  /\
  10  6  8
  /\  /\ /\
 2  18  9  5
/ \ /\  /\ /\
19  7  10  4  16

已经告诉你了，这是个DP的题目，你能AC吗?
*/

/*IN
每个测试实例的第一行是一个整数N (1 <= N <= 50)，表示数塔的高度，接下来用N行数字表示数塔，其中第i行有个i个整数，且所有的整数均在区间[0,99]内。
*/

/*OUT
对于每个测试实例，输出可能得到的最大和，每个实例的输出占一行。
*/

/*IN
5
7
3 8
8 1 0
2 7 4 4
4 5 2 6 5
*/

/*OUT
30
*/

#include <iostream>
#include <vector>
#include <map>
using namespace std;

int main()
{
	int n = 0;
	int num = 0;
	int dp[50][50] = { 0 };
	map<int, vector<int>> nums;
	cin >> n;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j <= i; j++)
		{
			cin >> num;
			nums[i].push_back(num);
		}
	}
	dp[0][0] = nums[0][0];
	for (int i = 1; i < n; i++)
	{
		for (unsigned int j = 0; j < nums[i].size(); j++)
		{
			if (j == 0)
			{
				dp[i][j] = dp[i - 1][j] + nums[i][j];
				continue;
			}
			if (j == 49)
			{
				dp[i][j] = dp[i - 1][j - 1] + nums[i][j];
			}
			dp[i][j] = (dp[i - 1][j - 1] < dp[i - 1][j]) ? dp[i - 1][j] + nums[i][j] : dp[i - 1][j - 1] + nums[i][j];
		}
	}
	int max = 0;
	for (unsigned int i = 0; i < nums[n - 1].size(); i++)
	{
		if (dp[n - 1][i] > max)
		{
			max = dp[n - 1][i];
		}
	}
	cout << max << endl;
}
