最基本的三地址码是这样的：
x = y op z
表示将输入的两个变量y/z进行op操作（如加减乘除）后，赋值给输出变量x。因这里涉及三个变量地址，因此称为三地址码。
三地址码的生成逻辑：
根据输入的代码语句，从左到右遍历，根据运算符寻找运算符对应的左右操作数并转化成算术表达式执行运算，如运算符的右操作数存在更高优先级的运算，则先计算，此过程可参考：
编译原理系列-语法分析

如源代码：
		int x,y,z;
		int xy = ((x+y)*5 + (z^23))/32;
其中第2行，通过gcc编译，生成的中间代码如下：
  D.2079D.2079 = x + y;
  D.2080D.2080 = D.2079D.2079 * 5;
  D.2081D.2081 = z ^ 23;
  D.2082D.2082 = D.2080D.2080 + D.2081D.2081;
  xy = D.2082D.2082 / 32;
这里的D.XX变量为临时变量。
*/

/*IN
每个用例输入只有一行(最大长度1024个字符)，表示一段代码语句，格式为一串串的token，并使用空格分隔。
token类型为变量名、运算符、分隔符，运算符只包括"+"、"-"、"*"、"/"，表示加、减、乘、除，分隔符只包括"("、")"，表示左右括号。 不涉及关键字、数字。
运算优先级：左右括号 〉 乘/除〉加/减。

如：a + b - b * ( c + b ) * d / e

a + b - b * ( c + b ) * d / e
*/
