/*1081 编译原理系列-生成中间代码
C/C++编译器，从源代码到可执行文件，整个过程称为Build，大致需要经过四个步骤：
1、预处理，Preprocess，即将源文件中的头文件包含引入、宏定义展开、去除注释等，生成一个可独立编译单元；
2、编译，Compile，从C/C++高级语言代码翻译为汇编代码；
3、汇编，Assemble，将汇编代码翻译为二进制的机器码，生成可重定位文件；
4、链接，link，即将多个可重定位文件链接为最终的可执行文件；
整个详细的过程可参考如下分享：
http://km.dahuatech.com/kms/multidoc/kms_multidoc_knowledge/kmsMultidocKnowledge.do?method=view&fdId=1630acd91b724b176aa0b4a402183baa
以上4步中，其中第2步Compile，是最为核心的一步，Compile过程又大致分为词法分析、语法分析、语义分析、中间树构建、中间代码生成、优化、生成汇编码等几个过程。

Compile过程中，在经过词法分析、语法/语义分析后，就会生成中间代码（Intermediate Code），中间代码有以下特性：
1、输入语言类型无关性；
2、目标机器与运行环境无关性；
3、易于下一步的优化处理；
4、易于生成汇编代码；
5、逻辑结构简单明确；
通过中间代码，可将整个Compile过程分为前端部分与后端部分，显然的，前端部分只负责将源代码转换为中间代码，后端部分将中间代码进一步转换为汇编代码。
这样，当我们要为一个新处理器添加c/c++代码编译支持，只需要增加一个新的后端处理模块即可。
使用gcc编译时，可通过选项 -fdump-tree-all 生成后缀名为.cfg的中间代码文件。
中间代码有多种表示方式，常见的有逆波兰记号、四元式、三元式和树， gcc 用的是三地址码表示方法。本题我们就介绍三地址码。
