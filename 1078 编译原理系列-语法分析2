此树中的每一处节点，包括叶子节点，均表示一个表达式，表达式有两种定义：
1、不带运算符的独立变量名或数字，对应树中的叶子节点；
2、带运算符以及左右操作数，操作数又是一个表达式，即可能是简单的独立变量名或数字，也可能是较复杂的带运算符的嵌套子表达式，对应树中的非叶子节点；
*/

/*IN
简单起见，每个用例输入只有一行(最大长度1024个字符)，表示一段代码语句，格式为一串串的token，并使用空格分隔。
token类型只定义为三种：变量名、数字、运算符，不考虑关键字及分隔符。
运算符定义为五种："+"、"-"、"*"、"/"、"="，表示加、减、乘、除、赋值。
如输入：
abc = x + y * 100 - 50 / 10
此处一共表示11个token。
（注：感兴趣的同学，可在赛后增加分隔符：左右小括号，会显著增加解析的复杂度，涉及嵌套）

abc = x + y * 100 - 50 / 10
*/

/*OUT
要求从左到右遍历所有token，然后构建出语法树表达式，并按后序遍历法，按行输出每一个树节点，一行表示一个节点，即一个表达式。
后序遍历法，即先访问左子树，再是右子树，再根节点。例如下图，应按C-D-B-F-G-E-A输出。

			A
			/\
		   B  E
		  /\  /\
		C  D  F  G
