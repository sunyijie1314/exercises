每一行的输出开始为"Sx:"(S为大写)，接下来是节点内容，中间使用空格分隔，其中x表示第几个节点，从1开始编号，也即为表达式代号。
节点内容的输出格式有两种，对应两种不同表达式定义：
1、不带运算符的独立变量名或数字，则直接输出变量名或数字的值；
2、带运算符以及左右操作数，分别输出运算符类型（即"+"、"-"、"*"、"/"、"="）、左操作数表达式代号、右操作数表达式代号（本题只考虑双目运算，即每个运算表达式均有两个操作数，没有单目运算）；
需要考虑运算优化级：乘/除〉加/减〉赋值

S1: abc
S2: x
S3: y
S4: 100
S5: * S3 S4
S6: + S2 S5
S7: 50
S8: 10
S9: / S7 S8
S10: - S6 S9
S11: = S1 S10
*/

/*HINT
从输入中，以空格为分隔符，逐个提取token示例代码：
	char buf[1024] = {0};
	while (EOF != scanf("%s", buf))
	{
	   // XXXX
	}

样例输入中的语句，构建的语法表达树如下图所示，共有11处节点：

				S11 =
				/  \
			   /   S10 -
		   S1 abc  /  \
				S6 +   S9 /
				/ \     /   \
			   /  S5 * S7 50 S8 10
			 S2 x  / \
				 S3 y S4 100

计算过程如下：
先执行 y*100，再执行 x + y*100，再执行50/10，再执行x + y*100 - 50/10，最后执行 abc = x + y*100 - 50/10
*/
