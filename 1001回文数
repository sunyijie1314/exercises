/*1001 回文数
如果一个数从左边读和从右边读一样，称之为回文数。例如,75457是一个回文数。
当然，这个特性还依赖于表示它的进制。例如17，不是一个十进制的回文数，却是一个二进制的回文数（10001）。
本题的目标是，在二~十六进制下，确认给出的一系列数是不是回文数。
*/

/*IN
输入包含一些整数。每个数n(0<n<50000)用十进制数表示，每个数一行。输入0结束。

15
19
0
*/

/*OUT
程序输出信息："Number i is palindrom in basis.",i是给定的数，接着输出进制，在该进制下i是回文。如果这个数在二~十六进制下都不是回文数，程序就输出信息：“Number i is not palindrom”。

Number 15 is palindrom in basis 2.
Number 15 is palindrom in basis 4.
Number 15 is palindrom in basis 14.
Number 15 is palindrom in basis 16.
Number 19 is not palindrom
*/
#include <iostream>
#include <string>
using namespace std;

bool isPalindromicNumber(string str)
{
	int m = str.size() - 1;
	int n = 0;
	while (n < m)
	{
		if (str[n] == str[m])
		{
			n++;
			m--;
		}
		else
		{
			return false;
		}
	}
	return true;
}

string getSystem(int num, int system)
{
	string str;
	char c;
	while (num)
	{
		c = num % system >= 10 ? num % system + 'a' - 10: num % system + '0';
		str = c + str;
		num /= system;
	}
	return str;
}

int main()
{
	int n = 0;
	while (cin >> n)
	{
		if (n<0||n>=50000)
		{
			continue;
		}
		if (n == 0)
		{
			break;
		}
		bool isPalin = false;
		for (int i = 2; i < 17; i++)
		{
			if (isPalindromicNumber(getSystem(n, i)))
			{
				cout << "Number " << n << " is palindrom in basis " << i << "." << endl;
				isPalin = true;
			}
		}
		if (false == isPalin)
		{
			cout << "Number " << n << " is not palindrom" << endl;
		}
	}


}

